# -*- coding: utf-8 -*-
"""Copy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ktt-CbH0US6Cah07juk8nbvJGLazKj2R
"""



# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd
import matplotlib.pylab as plt
import seaborn as sn
# %matplotlib inline
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from scipy import stats
from sklearn import preprocessing
from sklearn.metrics import plot_confusion_matrix


from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score

from google.colab import files
# use seaborn plotting defaults
import seaborn as sns; sns.set()
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['Heart_Disease_Prediction.csv']))

heart_Disease_with_name = df['Heart Disease']

df['Heart Disease'] = df['Heart Disease'].astype('category').cat.codes
df

df.describe()

from scipy.stats import entropy
entropy(df, base=2)

numeric= ['Age','Sex','BP','FBS over 120','Cholesterol','Max HR','ST depression','Number of vessels fluro','Heart Disease',]

sn.heatmap(df[numeric].corr(),cmap='RdBu')

#sn.barplot(x=df['Heart Disease'],y=df['BP'],pallet= sns.color_palette("vlag", as_cmap=True))
sn.barplot(x=df['Heart Disease'],y=df['BP'],data=df,palette="Blues_d")

sn.barplot(x=df['Heart Disease'],y=df['Cholesterol'],data=df, palette="Blues_d")

df6 = {'Age and Sex':[],'Heart Disease':[]}
j=0
for i in df['Age']:
  if i<=50 :
    if df['Sex'][j] == 0:
      df6['Age and Sex'].append('A')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df6['Age and Sex'].append('C')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
  if i>50 :
    if df['Sex'][j] == 0:
      df6['Age and Sex'].append('B')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df6['Age and Sex'].append('D')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
  
  
df7 = pd.DataFrame.from_dict(df6)
df7

pd.crosstab(df7['Age and Sex'],df7['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])#8
plt.title('Heart Disease Frequency for age and sex')
plt.xlabel('A: woman below 50, B: woman above 50, C: man below 50, D: man above 50')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

plt.scatter(x=df.Age[df['Heart Disease']==1], y=df['Max HR'][(df['Heart Disease']==1)], c="r")#6
plt.scatter(x=df.Age[df['Heart Disease']==0], y=df['Max HR'][(df['Heart Disease']==0)])
plt.legend(["Disease", "Not Disease"])
plt.xlabel("Age")
plt.ylabel("Maximum Heart Rate")
plt.show()

df6 = {'Age and Sex':[],'Heart Disease':[]}
j=0
for i in df['Age']:
  if i<=50 :
    if df['Sex'][j] == 0:
      df6['Age and Sex'].append('A')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df6['Age and Sex'].append('C')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
  if i>50 :
    if df['Sex'][j] == 0:
      df6['Age and Sex'].append('B')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df6['Age and Sex'].append('D')
      df6['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
  
  
df7 = pd.DataFrame.from_dict(df6)
df7

pd.crosstab(df7['Age and Sex'],df7['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])#7
plt.title('Heart Disease Frequency for age and sex')
plt.xlabel('A: woman below 50, B: woman above 50, C: man below 50, D: man above 50')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

pd.crosstab(df.Sex,df['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r' ])#4
plt.title('Heart Disease Frequency for Sex')
plt.xlabel('Sex (0 = Female, 1 = Male)')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

df1 = {'Cholesterol':[],'Heart Disease':[]}
j=0
for i in df['Cholesterol']:
  if i<200:
    df1['Cholesterol'].append('A')
    df1['Heart Disease'].append(df['Heart Disease'][j])
    j+=1
  if (i>= 200 and i<=239) :
    df1['Cholesterol'].append('B')
    df1['Heart Disease'].append(df['Heart Disease'][j])
    j+=1
  if i>= 240 :
    df1['Cholesterol'].append('C')
    df1['Heart Disease'].append(df['Heart Disease'][j])
    j+=1

#df2 = pd.DataFrame(df1,columns=['Cholesterol','Heart Disease']
df2 = pd.DataFrame.from_dict(df1)
df2

pd.crosstab(df2.Cholesterol,df2['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])
plt.title('Heart Disease Frequency for Cholesterol')
plt.xlabel('A: cholesterol<200, B: 200<cholesterol<240, c: cholesterol>240')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

df10 = {'Cholesterol and Thallium':[],'Heart Disease':[]}
j=0
for i in df['Cholesterol']:
  if i<200:
    if df['Thallium'][j] == 3:
      df10['Cholesterol and Thallium'].append('C<200, T=3')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    elif df['Thallium'][j] == 6:
      df10['Cholesterol and Thallium'].append('C<200, T=6')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
        df10['Cholesterol and Thallium'].append('C<200, T=7')
        df10['Heart Disease'].append(df['Heart Disease'][j])
        j+=1 
  if (i>= 200 and i<=239) :
    if df['Thallium'][j] == 3:
      df10['Cholesterol and Thallium'].append('200<C<240, T=3')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    elif df['Thallium'][j] == 6:
      df10['Cholesterol and Thallium'].append('200<C<240, T=6')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df10['Cholesterol and Thallium'].append('200<C<240, T=7')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1 
  if i>= 240 :
    if df['Thallium'][j] == 3:
      df10['Cholesterol and Thallium'].append('C>240, T=3')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    elif df['Thallium'][j] == 6:
      df10['Cholesterol and Thallium'].append('C>240, T=6')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df10['Cholesterol and Thallium'].append('C>240, T=7')
      df10['Heart Disease'].append(df['Heart Disease'][j])
      j+=1 

#df2 = pd.DataFrame(df1,columns=['Cholesterol','Heart Disease']
df11 = pd.DataFrame.from_dict(df10)
df11

pd.crosstab(df11['Cholesterol and Thallium'],df11['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])
plt.title('Heart Disease Frequency for Cholesterol and thallium')
plt.xlabel('')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

df12 = {'EKG and Thallium':[],'Heart Disease':[]}
j=0
for i in df['EKG results']:
  if i==0:
    if df['Thallium'][j] == 3:
      df12['EKG and Thallium'].append('EKG=0, T=3')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    elif df['Thallium'][j] == 6:
      df12['EKG and Thallium'].append('EKG=0, T=6')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
        df12['EKG and Thallium'].append('EKG=0, T=7')
        df12['Heart Disease'].append(df['Heart Disease'][j])
        j+=1 
  if i==1 :
    if df['Thallium'][j] == 3:
      df12['EKG and Thallium'].append('EKG=1, T=3')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    elif df['Thallium'][j] == 6:
      df12['EKG and Thallium'].append('EKG=1, T=6')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df12['EKG and Thallium'].append('EKG=1, T=7')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1 
  if i==2 :
    if df['Thallium'][j] == 3:
      df12['EKG and Thallium'].append('EKG=2, T=3')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    elif df['Thallium'][j] == 6:
      df12['EKG and Thallium'].append('EKG=2, T=6')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1
    else:
      df12['EKG and Thallium'].append('EKG=2, T=7')
      df12['Heart Disease'].append(df['Heart Disease'][j])
      j+=1 

#df2 = pd.DataFrame(df1,columns=['Cholesterol','Heart Disease']
df13 = pd.DataFrame.from_dict(df12)
df13

pd.crosstab(df13['EKG and Thallium'],df13['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])
plt.title('Heart Disease Frequency for EKG and thallium')
plt.xlabel('')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

df3 = {'Age':[],'Heart Disease':[]}#9 אולי לא צריך
j=0
for i in df['Age']:
  if i<=50:
    df3['Age'].append('A')
    df3['Heart Disease'].append(df['Heart Disease'][j])
    j+=1
  if i>50 :
    df3['Age'].append('B')
    df3['Heart Disease'].append(df['Heart Disease'][j])
    j+=1

df4 = pd.DataFrame.from_dict(df3)
df4 
pd.crosstab(df4.Age,df4['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])
plt.title('Heart Disease Frequency Age')
plt.xlabel('A: Age below 50, B:Age above 50')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

pd.crosstab(df['FBS over 120'],df['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])
plt.title('Heart Disease Frequency Blood fasting sugar')
plt.xlabel('0: less than 120, 1: more than 120')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

pd.crosstab(df['Number of vessels fluro'],df['Heart Disease']).plot(kind="bar",figsize=(15,6),color=['b','r'])
plt.title('Heart Disease Frequency for Number of vessels')
plt.xlabel(' ')
plt.xticks(rotation=0)
plt.legend(["Absence", "Presence"])
plt.ylabel('Frequency')
plt.show()

df = pd.get_dummies(df, columns = ['EKG results','Thallium','Slope of ST'])
df

from sklearn.model_selection import train_test_split
features = ['Age','Sex','Chest pain type','BP','Cholesterol','FBS over 120','Max HR','Exercise angina','EKG results_0','EKG results_1','EKG results_2','ST depression','Slope of ST_1','Slope of ST_2','Slope of ST_3','Number of vessels fluro','Thallium_3','Thallium_6','Thallium_7']
x_data= df[features]
X = (x_data - np.min(x_data)) / (np.max(x_data) - np.min(x_data)).values #נרמול
y = df['Heart Disease'].values
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0, test_size=0.30)

scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

error = []
for i in range(1, 40):
  knn= KNeighborsClassifier(n_neighbors=i)
  knn.fit(X_train, y_train)
  pred_i = knn.predict(X_test)
  error.append(np.mean(pred_i != y_test))


plt.figure(figsize=(12,6))
plt.plot(range(1,40), error, color= 'r', linestyle='dashed', marker = 'o', markerfacecolor='b', markersize=10)
plt.title('Error Rate K Value')
plt.xlabel('K Value')
plt.ylabel('Mean Error')

classifier = KNeighborsClassifier(n_neighbors=35)
classifier.fit(X_train, y_train)

y_pred  = classifier.predict(X_test)

knn = np.mean(y_test == y_pred)
knn

cf_knn=confusion_matrix(y_test, y_pred)
cf_knn

print(classification_report(y_test, y_pred))

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cf_knn.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cf_knn.flatten()/np.sum(cf_knn)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cf_knn, annot=labels, fmt='', cmap='RdBu')

knn_probs = classifier.predict_proba(X_test)
knn_probs[:10,:]
knn_probs = knn_probs[:,1]
knn_auc = roc_auc_score(y_test, knn_probs)
knnfpr, knntpr, knn_thresholds = roc_curve(y_test, knn_probs)

"""SVM"""

sc_x = StandardScaler()

X_train = sc_x.fit_transform(X_train)
X_test = sc_x.transform(X_test)

from sklearn import svm
#svmm = svm.SVC(kernel='rbf', C=1e9, gamma=1e-07, probability=True).fit(x_train,y_train)
svmm = svm.SVC(kernel='rbf',probability=True)
svmm.fit(X_train,y_train)
y_pred_svm = svmm.predict(X_test)
svm = np.mean(y_test == y_pred_svm)
svm

cf_svm=confusion_matrix(y_test, y_pred_svm)
cf_svm

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cf_svm.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cf_svm.flatten()/np.sum(cf_svm)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cf_svm, annot=labels, fmt='', cmap='RdBu')

svm_probs = svmm.predict_proba(X_test)
svm_probs[:10,:]
svm_probs = svm_probs[:,1]
svm_auc = roc_auc_score(y_test, svm_probs)
svmfpr, svmtpr, svm_thresholds = roc_curve(y_test, svm_probs)

"""Random Forest

"""

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators = 1000, random_state = 1)
rf.fit(X_train, y_train)

rfofest = rf.score(X_test,y_test)
rfofest

y_head_rf = rf.predict(X_test)

cm_rf = confusion_matrix(y_test,y_head_rf)
print(cm_rf)

from sklearn.tree import export_graphviz
import pydot
# Pull out one tree from the forest
tree = rf.estimators_[4]
# Saving feature names for later use
feature_list = list(x_data.columns)
export_graphviz(tree, out_file = 'tree.dot', feature_names = feature_list, rounded = True, precision = 1)
# Use dot file to create a graph
(graph, ) = pydot.graph_from_dot_file('tree.dot')
# Write graph to a png file
graph.write_png('tree.png')
from google.colab import files
files.download("tree.png")

group_names = ['True Neg','False Pos','False Neg','True Pos']
group_counts = ['{0:0.0f}'.format(value) for value in
                cm_rf.flatten()]
group_percentages = ['{0:.2%}'.format(value) for value in
                     cm_rf.flatten()/np.sum(cm_rf)]
labels = [f'{v1}\n{v2}\n{v3}' for v1, v2, v3 in
          zip(group_names,group_counts,group_percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(cm_rf, annot=labels, fmt='', cmap='RdBu')

rf_probs = rf.predict_proba(X_test)
rf_probs[:10,:]
rf_probs = rf_probs[:,1]
rf_auc = roc_auc_score(y_test, rf_probs)
rffpr, rftpr, rf_thresholds = roc_curve(y_test, rf_probs)

def plot_roc_curve(fpr, tpr):
    plt.plot(fpr, tpr, color='orange', label='ROC')
    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend()
    plt.show()

plt.figure(dpi=150)
plt.plot(rffpr, rftpr, color='g', label='RF ROC')
plt.plot(knnfpr, knntpr, color='b', label='Knn ROC')
plt.plot(svmfpr, svmtpr, color='orange', label='SVM ROC')
plt.plot([0, 1], [0, 1], color='r', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend()

rf_auc

knn_auc

svm_auc

final = {'Knn':knn*100,'RF':rfofest*100,'SVM':svm*100}

final

Algorithems = list(final.keys()) 
Accuracy = list(final.values()) 
   
fig = plt.figure(figsize = (8, 5)) 
  
# creating the bar plot 
plt.bar(Algorithems, Accuracy, color=('b','g','orange'),  
        width = 0.4) 
  
plt.xlabel("Algorithems") 
plt.ylabel("%Accuracy") 
plt.title("Accuracy vs. Algorithems") 
plt.show()

def entropy(data, column):
  probs = data[column].value_counts(normalize=True)
  return -1 * np.sum(np.log2(probs) * probs)

print("Age entropy:",entropy (df,"Age"))

print("Chest pain type entropy:",entropy (df,"Chest pain type"))
print("BP entropy:",entropy (df,"BP"))
print("Cholesterol entropy:",entropy (df,"Cholesterol"))
print("FBS over 120 entropy:",entropy (df,"FBS over 120"))
#print("EKG results entropy:",entropy (df,"EKG results"))
print("Max HR entropy:",entropy (df,"Max HR"))
print("Exercise angina entropy:",entropy (df,"Exercise angina"))
print("ST depression:",entropy (df,"ST depression"))
#print("Slope of ST entropy:",entropy (df,"Slope of ST"))
print("Number of vessels fluro entropy:",entropy (df,"Number of vessels fluro"))
#print("Thallium entropy:",entropy (df,"Thallium"))
#					Heart Disease

def gini_index(data, column):
  return 1 - np.sum(np.square(data[column].value_counts(normalize=True)))

print("Age gini_index:",gini_index (df,"Age"))

print("Chest pain type gini_index:",gini_index (df,"Chest pain type"))
print("BP gini_index:",gini_index(df,"BP"))
print("Cholesterol gini_index:",gini_index (df,"Cholesterol"))
print("FBS over 120 gini_index:",gini_index (df,"FBS over 120"))
#print("EKG results entropy:",gini_index (df,"EKG results"))
print("Max HR gini_index:",gini_index (df,"Max HR"))
print("Exercise angina gini_index:",gini_index (df,"Exercise angina"))
print("ST depression gini_index:",gini_index (df,"ST depression"))
#print("Slope of ST gini_index:",gini_index (df,"Slope of ST"))
print("Number of vessels fluro gini_index:",gini_index (df,"Number of vessels fluro"))
#print("Thallium gini_index:",gini_index (df,"Thallium"))

!pip install info_gain
from info_gain import info_gain

print("info_gain Sex, Heart Disease:", info_gain.info_gain(df["Sex"], df["Heart Disease"]))

print("info_gain FBS over 120, Heart Disease:", info_gain.info_gain(df["FBS over 120"], df["Heart Disease"]))